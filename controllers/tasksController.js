import Task from '../models/Task.js';
import Response from '../models/Response.js';
import Message from '../models/Message.js';
import Category, { CATEGORY_TYPES } from '../models/Category.js';

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const requireAuth = (req, res, next) => {
  if (!req.session.userId) {
    return res.redirect('/login');
  }
  next();
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
export const getTasks = async (req, res) => {
  try {
    console.log('getTasks called');
    const page = parseInt(req.query.page) || 1;
    const limit = 10;
    const skip = (page - 1) * limit;

    const tasks = await Task.find({ status: 'open' })
      .populate('author', 'firstName lastName username')
      .populate('category', 'name icon')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    const totalTasks = await Task.countDocuments({ status: 'open' });
    const totalPages = Math.ceil(totalTasks / limit);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tasks.forEach(task => {
      task.createdAtFormatted = task.createdAt.toLocaleDateString('ru-RU');
    });

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const pages = [];
    for (let i = 1; i <= totalPages; i++) {
      pages.push(i);
    }

    res.render('tasks/index', {
      tasks,
      currentPage: page,
      totalPages,
      pages,
      hasNext: page < totalPages,
      hasPrev: page > 1,
      title: '–ó–∞–¥–∞—á–∏'
    });
  } catch (error) {
    res.render('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á' });
  }
};

// –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
export const getCreateTask = async (req, res) => {
  try {
    const categories = await Category.find();
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–ª–æ–Ω–µ
    const typesArray = Object.entries(CATEGORY_TYPES).map(([name, icon]) => ({
      name,
      icon
    }));

    res.render('tasks/create', {
      categories,
      categoryTypes: CATEGORY_TYPES,
      typesArray: typesArray,
      title: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'
    });
  } catch (error) {
    res.render('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
export const postCreateTask = async (req, res) => {
  const { title, description, category } = req.body;
  try {
    const task = new Task({
      title,
      description,
      category,
      author: req.session.userId
    });
    await task.save();
    res.redirect('/tasks');
  } catch (error) {
    const categories = await Category.find();
    res.render('tasks/create', {
      categories,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏',
      title: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'
    });
  }
};

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
export const getTask = async (req, res) => {
  try {
    console.log('Loading task with ID:', req.params.id);

    const task = await Task.findById(req.params.id)
      .populate('author', 'firstName lastName username')
      .populate('category', 'name icon')
      .populate({
        path: 'acceptedResponse',
        populate: {
          path: 'responder',
          select: 'firstName lastName username'
        }
      });

    if (!task) {
      console.log('Task not found with ID:', req.params.id);
      return res.render('error', { message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    console.log('Task found:', task.title);

    const responses = await Response.find({ task: req.params.id })
      .populate('responder', 'firstName lastName username')
      .sort({ createdAt: -1 });

    console.log('Responses found:', responses.length);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    task.createdAtFormatted = task.createdAt.toLocaleDateString('ru-RU');
    responses.forEach(response => {
      response.createdAtFormatted = response.createdAt.toLocaleDateString('ru-RU');
      response.isOwnResponse = response.responder._id.toString() === req.session.userId;
    });

    const isAuthor = req.session.userId ? task.author._id.toString() === req.session.userId : false;
    const hasResponded = req.session.userId ? responses.some(r => r.responder._id.toString() === req.session.userId) : false;

    res.render('tasks/show', {
      task,
      responses,
      isAuthor,
      hasResponded,
      currentUserId: req.session.userId || null,
      title: task.title
    });
  } catch (error) {
    console.error('Error loading task:', error);
    res.render('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏: ' + error.message });
  }
};

// –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫
export const postResponse = async (req, res) => {
  const { message } = req.body;
  try {
    const task = await Task.findById(req.params.id);
    if (!task || task.status !== 'open' || task.author.toString() === req.session.userId) {
      return res.redirect(`/tasks/${req.params.id}`);
    }

    const existingResponse = await Response.findOne({
      task: req.params.id,
      responder: req.session.userId
    });

    if (existingResponse) {
      return res.redirect(`/tasks/${req.params.id}`);
    }

    const response = new Response({
      task: req.params.id,
      responder: req.session.userId,
      message
    });
    await response.save();

    res.redirect(`/tasks/${req.params.id}`);
  } catch (error) {
    res.redirect(`/tasks/${req.params.id}`);
  }
};

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫
export const editResponse = async (req, res) => {
  const { message } = req.body;
  try {
    const response = await Response.findById(req.params.responseId);
    if (!response || response.responder.toString() !== req.session.userId) {
      return res.redirect(`/tasks/${req.params.taskId}`);
    }

    const task = await Task.findById(req.params.taskId);
    if (!task || task.status !== 'open') {
      return res.redirect(`/tasks/${req.params.taskId}`);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫
    response.message = message;
    await response.save();

    res.redirect(`/tasks/${req.params.taskId}`);
  } catch (error) {
    res.redirect(`/tasks/${req.params.taskId}`);
  }
};

// –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫
export const deleteResponse = async (req, res) => {
  try {
    const response = await Response.findById(req.params.responseId);
    if (!response || response.responder.toString() !== req.session.userId) {
      return res.redirect(`/tasks/${req.params.taskId}`);
    }

    const task = await Task.findById(req.params.taskId);
    if (!task || task.status !== 'open') {
      return res.redirect(`/tasks/${req.params.taskId}`);
    }

    // –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫
    await Response.findByIdAndDelete(req.params.responseId);

    res.redirect(`/tasks/${req.params.taskId}`);
  } catch (error) {
    res.redirect(`/tasks/${req.params.taskId}`);
  }
};

// –ü—Ä–∏–Ω—è—Ç—å –æ—Ç–∫–ª–∏–∫
export const acceptResponse = async (req, res) => {
  try {
    const task = await Task.findById(req.params.taskId);
    if (!task || task.author.toString() !== req.session.userId || task.status !== 'open') {
      return res.redirect(`/tasks/${req.params.taskId}`);
    }

    const response = await Response.findById(req.params.responseId);
    if (!response || response.task.toString() !== req.params.taskId) {
      return res.redirect(`/tasks/${req.params.taskId}`);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞
    response.status = 'accepted';
    await response.save();

    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    task.status = 'in_progress';
    task.acceptedResponse = response._id;
    await task.save();

    // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
    await Response.updateMany(
      { task: req.params.taskId, _id: { $ne: req.params.responseId } },
      { status: 'rejected' }
    );

    res.redirect(`/tasks/${req.params.taskId}`);
  } catch (error) {
    res.redirect(`/tasks/${req.params.taskId}`);
  }
};

// –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É
export const closeTask = async (req, res) => {
  try {
    const task = await Task.findById(req.params.id);
    if (!task || task.author.toString() !== req.session.userId || task.status !== 'in_progress') {
      return res.redirect(`/tasks/${req.params.id}`);
    }

    task.status = 'closed';
    await task.save();

    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏
    const systemMessage = new Message({
      task: req.params.id,
      message: `üìã –ó–∞–¥–∞—á–∞ "${task.title}" –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º.`,
      isSystemMessage: true,
      isRead: true
    });
    await systemMessage.save();

    res.redirect(`/tasks/${req.params.id}`);
  } catch (error) {
    res.redirect(`/tasks/${req.params.id}`);
  }
};

// –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
export const getEditTask = async (req, res) => {
  try {
    console.log('Loading edit form for task ID:', req.params.id);
    console.log('User ID:', req.session.userId);

    if (!req.session.userId) {
      console.log('User not authenticated');
      return res.redirect('/login');
    }

    const task = await Task.findById(req.params.id).populate('category', 'name');

    if (!task) {
      console.log('Task not found with ID:', req.params.id);
      return res.render('error', { message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    console.log('Task found:', task.title);
    console.log('Task author:', task.author.toString());
    console.log('Current user:', req.session.userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏
    if (task.author.toString() !== req.session.userId) {
      console.log('User is not the author of the task');
      return res.render('error', { message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏' });
    }

    console.log('User is the author, task status:', task.status);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
    if (task.status === 'closed') {
      console.log('Task is closed, cannot edit');
      return res.render('error', { message: '–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞–¥–∞—á—É' });
    }

    console.log('Loading categories...');
    const categories = await Category.find();
    console.log('Categories loaded:', categories.length);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–ª–æ–Ω–µ
    const typesArray = Object.entries(CATEGORY_TYPES).map(([name, icon]) => ({
      name,
      icon
    }));

    console.log('Rendering edit form for task:', task.title);
    res.render('tasks/edit', {
      task: task.toObject(),
      categories,
      categoryTypes: CATEGORY_TYPES,
      typesArray: typesArray,
      title: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.render('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message });
  }
};

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
export const postEditTask = async (req, res) => {
  try {
    if (!req.session.userId) {
      return res.redirect('/login');
    }

    const { title, description, category } = req.body;
    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.render('error', { message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –∑–∞–¥–∞—á–∏
    if (task.author.toString() !== req.session.userId) {
      return res.render('error', { message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
    if (task.status === 'closed') {
      return res.render('error', { message: '–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞–¥–∞—á—É' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    task.title = title;
    task.description = description;
    task.category = category;

    await task.save();

    res.redirect(`/tasks/${task._id}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–Ω–æ–≤–æ –¥–ª—è —Ñ–æ—Ä–º—ã —Å –æ—à–∏–±–∫–æ–π
    const task = await Task.findById(req.params.id).populate('category', 'name');
    const categories = await Category.find();

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–ª–æ–Ω–µ
    const typesArray = Object.entries(CATEGORY_TYPES).map(([name, icon]) => ({
      name,
      icon
    }));

    res.render('tasks/edit', {
      task: task.toObject(),
      categories,
      categoryTypes: CATEGORY_TYPES,
      typesArray: typesArray,
      error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + error.message,
      title: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∏ –∑–∞–¥–∞—á–∏)
export const getMyTasks = async (req, res) => {
  try {
    if (!req.session.userId) {
      return res.redirect('/login');
    }

    const page = parseInt(req.query.page) || 1;
    const limit = 10;
    const skip = (page - 1) * limit;

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–¥–µ –æ–Ω –∞–≤—Ç–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
    const tasks = await Task.find({
      $or: [
        { author: req.session.userId }, // –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        { acceptedResponse: { $exists: true } } // –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–Ω—è—Ç—ã–º–∏ –æ—Ç–∫–ª–∏–∫–∞–º–∏
      ]
    })
    .populate('author', 'username firstName lastName')
    .populate('category', 'name icon')
    .populate({
      path: 'acceptedResponse',
      populate: {
        path: 'responder',
        select: 'username firstName lastName'
      }
    })
    .sort({ createdAt: -1 })
    .skip(skip)
    .limit(limit);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
    const filteredTasks = tasks.filter(task => {
      if (task.author._id.toString() === req.session.userId) {
        return true; // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏
      }
      if (task.acceptedResponse && task.acceptedResponse.responder) {
        return task.acceptedResponse.responder._id.toString() === req.session.userId;
      }
      return false;
    });

    const totalTasks = filteredTasks.length;
    const totalPages = Math.ceil(totalTasks / limit);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const pages = [];
    for (let i = 1; i <= totalPages; i++) {
      pages.push(i);
    }

    res.render('tasks/myTasks', {
      tasks: filteredTasks,
      currentPage: page,
      totalPages,
      pages,
      hasNext: page < totalPages,
      hasPrev: page > 1,
      title: '–ú–æ–∏ –∑–∞–¥–∞—á–∏'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.render('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: ' + error.message });
  }
};