<div class="d-flex justify-content-between align-items-center mb-4">
  <h1>{{task.title}}</h1>
  {{#if isAuthor}}
    <div class="d-flex gap-2">
      {{#if (eq task.status 'open')}}
        <a href="/tasks/{{task._id}}/edit" class="btn btn-warning">Редактировать</a>
      {{/if}}
      {{#if (eq task.status 'in_progress')}}
        <form action="/tasks/{{task._id}}/close" method="POST" class="d-inline">
          <button type="submit" class="btn btn-success">Закрыть задачу</button>
        </form>
      {{/if}}
    </div>
  {{/if}}
</div>

<div class="row">
  <div class="col-md-8">
    <div class="card mb-4">
      <div class="card-body">
        <div class="d-flex align-items-center mb-3">
          <i class="{{task.category.icon}} me-2"></i>
          <span class="badge bg-secondary me-2">{{task.category.name}}</span>
          <span class="badge {{#if (eq task.status 'open')}}bg-success{{else if (eq task.status 'in_progress')}}bg-warning{{else}}bg-secondary{{/if}}">
            {{#if (eq task.status 'open')}}Открыта{{else if (eq task.status 'in_progress')}}В работе{{else}}Закрыта{{/if}}
          </span>
        </div>
        <p class="card-text">{{task.description}}</p>
        <div class="d-flex justify-content-between align-items-center">
          <small class="text-muted">Автор:
            <a href="/users/{{task.author.username}}" target="_blank" class="text-decoration-none">
              {{#if task.author.firstName}}
                {{task.author.firstName}} {{task.author.lastName}}
              {{else}}
                {{task.author.username}}
              {{/if}}
            </a>
          </small>
          <small class="text-muted">{{task.createdAtFormatted}}</small>
        </div>
      </div>
    </div>

    <h3>Отклики {{#if responses.length}}({{responses.length}}){{/if}}</h3>

    {{#if user}}
      {{#if (eq task.status 'open')}}
        {{#unless isAuthor}}
          {{#unless hasResponded}}
            <div class="card mb-4">
            <div class="card-header">Оставить отклик</div>
            <div class="card-body">
              <form action="/tasks/{{task._id}}/response" method="POST">
                <div class="mb-3">
                  <label for="message" class="form-label">Ваше предложение</label>
                  <textarea class="form-control" id="message" name="message" rows="3" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Отправить отклик</button>
              </form>
            </div>
          </div>
          {{/unless}}
        {{/unless}}
      {{/if}}
    {{else}}
      <div class="alert alert-info mb-4">
        <i class="fas fa-info-circle me-2"></i>
        <strong>Хотите ответить на задачу?</strong>
        <a href="/login" class="alert-link">Войдите в аккаунт</a> или
        <a href="/register" class="alert-link">зарегистрируйтесь</a>, чтобы оставить отклик.
      </div>
    {{/if}}

    {{#each responses}}
      {{#if (or ../isAuthor isOwnResponse)}}
      <div class="card mb-3 {{#if (eq status 'accepted')}}border-success{{else if (eq status 'rejected')}}border-danger{{/if}}">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start mb-2">
            <strong>
              {{#if responder.name}}
                <a href="/users/{{responder.username}}" target="_blank" class="text-decoration-none">
                  {{responder.name}}{{#if (eq responder._id ../currentUserId)}} (Вы){{/if}}
                </a>
              {{else}}
                <a href="/users/{{responder.username}}" target="_blank" class="text-decoration-none">
                  {{responder.username}}{{#if (eq responder._id ../currentUserId)}} (Вы){{/if}}
                </a>
              {{/if}}
            </strong>
            <div>
              {{#if (eq status 'accepted')}}
                <span class="badge bg-success">Принят</span>
              {{else if (eq status 'rejected')}}
                <span class="badge bg-danger">Отклонен</span>
              {{else}}
                <span class="badge bg-secondary">Ожидает</span>
              {{/if}}
            </div>
          </div>
          <div id="response-display-{{_id}}">
            <p class="mb-2">{{message}}</p>
            <small class="text-muted">{{createdAtFormatted}}</small>
          </div>

          <div id="response-edit-{{_id}}" style="display: none;">
            <form action="/tasks/{{../task._id}}/response/{{_id}}/edit" method="POST" class="mt-2">
              <div class="mb-3">
                <textarea class="form-control" name="message" rows="3" required>{{message}}</textarea>
              </div>
              <button type="submit" class="btn btn-success btn-sm">Сохранить</button>
              <button type="button" class="btn btn-secondary btn-sm ms-2" onclick="cancelEdit('{{_id}}')">Отмена</button>
            </form>
          </div>

          {{#if ../isAuthor}}
            {{#if (eq status 'pending')}}
              <div class="mt-2">
                <form action="/tasks/{{../task._id}}/response/{{_id}}/accept" method="POST" class="d-inline">
                  <button type="submit" class="btn btn-success btn-sm">Принять</button>
                </form>
                <button type="button" class="btn btn-danger btn-sm ms-2" onclick="rejectResponse('{{_id}}')">Отклонить</button>
              </div>
            {{/if}}
          {{else if isOwnResponse}}
            {{#if (eq status 'pending')}}
              <div class="mt-2" id="response-actions-{{_id}}">
                <button type="button" class="btn btn-primary btn-sm" onclick="editResponse('{{_id}}')">Редактировать</button>
                <button type="button" class="btn btn-danger btn-sm ms-2" onclick="deleteResponse('{{_id}}')">Удалить</button>
              </div>
            {{/if}}
          {{/if}}
        </div>
      </div>
      {{/if}}
    {{else}}
      <div class="text-center text-muted mt-4">
        <p>Пока нет откликов</p>
      </div>
    {{/each}}

    <!-- Переписка между участниками задачи -->
    {{#if (and user (or (eq task.status 'in_progress') (eq task.status 'closed')))}}
      {{#if (or isAuthor hasResponded)}}
        <div class="card mt-4">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Переписка
              {{#if (eq task.status 'closed')}}
                <span class="badge bg-secondary ms-2">Задача закрыта</span>
              {{/if}}
            </h5>
            <div class="d-flex align-items-center gap-2">
              <button type="button" class="btn btn-sm btn-outline-primary" onclick="loadMessages()">
                <i class="fas fa-sync-alt"></i> Обновить
              </button>
              <small class="text-muted">
                {{#if isAuthor}}
                  Общение с исполнителем
                {{else}}
                  Общение с заказчиком
                {{/if}}
                {{#if (eq task.status 'closed')}}
                  <span class="ms-1 text-warning">(задача закрыта)</span>
                {{/if}}
              </small>
            </div>
          </div>
          <div class="card-body">
            {{#if (eq task.status 'closed')}}
              <div class="alert alert-warning text-center mb-3">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Задача закрыта</strong> - переписка доступна для обсуждения результатов работы
              </div>
            {{/if}}
            <div id="messages-container" style="height: 300px; overflow-y: auto; border: 1px solid #dee2e6; border-radius: 0.375rem; padding: 15px; margin-bottom: 15px;">
              <div class="text-center text-muted">
                <div class="spinner-border spinner-border-sm" role="status">
                  <span class="visually-hidden">Загрузка сообщений...</span>
                </div>
                <div>Загрузка сообщений...</div>
              </div>
            </div>

            <form id="message-form">
              <div class="input-group">
                <textarea class="form-control" id="message-input" name="message" rows="2" placeholder="Напишите сообщение..." maxlength="1000" required></textarea>
                <button class="btn btn-primary" type="submit" id="send-button">
                  <i class="fas fa-paper-plane"></i> Отправить
                </button>
              </div>
              <div class="form-text">Максимум 1000 символов</div>
            </form>
          </div>
        </div>
      {{/if}}
    {{/if}}
  </div>

  <div class="col-md-4">
    <div class="card">
      <div class="card-header">Информация о задаче</div>
      <div class="card-body">
        <p><strong>Статус:</strong>
          {{#if (eq task.status 'open')}}Открыта{{else if (eq task.status 'in_progress')}}В работе{{else}}Закрыта{{/if}}
        </p>
        {{#if task.acceptedResponse}}
          <p><strong>Исполнитель:</strong>
            <a href="/users/{{task.acceptedResponse.responder.username}}" target="_blank" class="text-decoration-none">
              {{#if task.acceptedResponse.responder.firstName}}
                {{task.acceptedResponse.responder.firstName}} {{task.acceptedResponse.responder.lastName}}
              {{else}}
                {{task.acceptedResponse.responder.username}}
              {{/if}}
            </a>
          </p>
        {{/if}}
        <p><strong>Создано:</strong> {{task.createdAtFormatted}}</p>
      </div>
    </div>
  </div>
</div>

<a href="/tasks" class="btn btn-secondary mt-3">Вернуться к списку</a>

<script>
function rejectResponse(responseId) {
  if (confirm('Вы уверены, что хотите отклонить этот отклик?')) {
    // Для простоты, пока что оставим без действия, можно добавить AJAX позже
    alert('Функция отклонения будет реализована');
  }
}

function editResponse(responseId) {
  // Скрыть отображение отклика
  document.getElementById('response-display-' + responseId).style.display = 'none';
  // Скрыть кнопки действий
  document.getElementById('response-actions-' + responseId).style.display = 'none';
  // Показать форму редактирования
  document.getElementById('response-edit-' + responseId).style.display = 'block';
}

function cancelEdit(responseId) {
  // Показать отображение отклика
  document.getElementById('response-display-' + responseId).style.display = 'block';
  // Показать кнопки действий
  document.getElementById('response-actions-' + responseId).style.display = 'block';
  // Скрыть форму редактирования
  document.getElementById('response-edit-' + responseId).style.display = 'none';
}

function deleteResponse(responseId) {
  if (confirm('Вы уверены, что хотите удалить свой отклик?')) {
    // Создаем форму для отправки запроса на удаление
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/tasks/' + '{{task._id}}' + '/response/' + responseId + '/delete';

    // Добавляем CSRF токен, если используется
    const csrfInput = document.createElement('input');
    csrfInput.type = 'hidden';
    csrfInput.name = '_csrf';
    csrfInput.value = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
    form.appendChild(csrfInput);

    document.body.appendChild(form);
    form.submit();
  }
}

// Глобальные переменные для работы с сообщениями
const taskId = '{{task._id}}';

// Загрузка сообщений
async function loadMessages() {
  try {
    const response = await fetch(`/tasks/${taskId}/messages`);
    const data = await response.json();

    if (data.success) {
      displayMessages(data.messages);
    } else {
      console.error('Ошибка загрузки сообщений:', data.error);
      document.getElementById('messages-container').innerHTML =
        '<div class="alert alert-danger">Ошибка загрузки сообщений: ' + data.error + '</div>';
    }
  } catch (error) {
    console.error('Ошибка сети:', error);
    document.getElementById('messages-container').innerHTML =
      '<div class="alert alert-danger">Ошибка сети при загрузке сообщений</div>';
  }
}

// Отображение сообщений
function displayMessages(messages) {
  const container = document.getElementById('messages-container');

  if (messages.length === 0) {
    container.innerHTML = '<div class="text-center text-muted">Пока нет сообщений</div>';
    return;
  }

  let html = '';
  messages.forEach(message => {
    const isSystemMessage = message.isSystemMessage || false;
    if (isSystemMessage) {
      // Системное сообщение - отображается по центру
      html += `
        <div class="alert alert-info text-center" style="max-width: 80%; margin: 10px auto; background-color: #e3f2fd;">
          <div class="d-flex justify-content-center align-items-center mb-1">
            <small class="text-muted">${new Date(message.createdAt).toLocaleString('ru-RU')}</small>
          </div>
          <div><strong>🔔 Системное уведомление:</strong> ${message.message.replace(/\n/g, '<br>')}</div>
        </div>
      `;
    } else {
      const isOwn = message.sender && message.sender._id === '{{currentUserId}}';
      const messageClass = isOwn ? 'alert alert-primary ms-auto' : 'alert alert-secondary me-auto';
      const messageStyle = isOwn ? 'margin-left: auto; margin-right: 0;' : 'margin-left: 0; margin-right: auto;';

      html += `
        <div class="${messageClass}" style="max-width: 70%; ${messageStyle}">
          <div class="d-flex justify-content-between align-items-start mb-1">
            <strong>${isOwn ? 'Вы' : (message.sender.firstName || message.sender.username)}</strong>
            <small class="text-muted">${new Date(message.createdAt).toLocaleString('ru-RU')}</small>
          </div>
          <div>${message.message.replace(/\n/g, '<br>')}</div>
        </div>
      `;
    }
  });

  container.innerHTML = html;
  container.scrollTop = container.scrollHeight;
}

// Отправка сообщения
async function sendMessage(message) {
  try {
    const response = await fetch(`/tasks/${taskId}/messages`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ message })
    });

    const data = await response.json();

    if (data.success) {
      document.getElementById('message-input').value = '';
      loadMessages(); // Перезагружаем сообщения
    } else {
      alert('Ошибка отправки сообщения: ' + data.error);
    }
  } catch (error) {
    console.error('Ошибка сети:', error);
    alert('Ошибка сети при отправке сообщения');
  }
}

// Инициализация
document.addEventListener('DOMContentLoaded', function() {
  const messageForm = document.getElementById('message-form');
  const messageInput = document.getElementById('message-input');

  if (messageForm) {
    // Загружаем сообщения сразу при открытии страницы
    loadMessages();

    // Обработка отправки формы
    messageForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const message = messageInput.value.trim();

      if (message) {
        sendMessage(message);
      }
    });

    // Обработка Ctrl+Enter для отправки
    messageInput.addEventListener('keydown', function(e) {
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
        e.preventDefault();
        const message = this.value.trim();
        if (message) {
          sendMessage(message);
        }
      }
    });
  }
});

</script>